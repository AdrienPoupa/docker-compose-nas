x-default-container: &default-container
  environment:
    - PUID=${USER_ID}
    - PGID=${GROUP_ID}
    - TZ=${TIMEZONE}
  restart: "no"

services:
  ################################################################
  #                        Services                              #
  ################################################################
  traefik:
    image: traefik:v3.3
    container_name: traefik
    restart: "no"
    environment:
      - CLOUDFLARE_EMAIL=${CLOUDFLARE_EMAIL}
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
      - CLOUDFLARE_ZONE_API_TOKEN=${CLOUDFLARE_ZONE_API_TOKEN}
      - LETS_ENCRYPT_EMAIL=${LETS_ENCRYPT_EMAIL}
    command:
      # Basic Traefik setup
      - --ping=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web-secure.address=:443
      # Redirect HTTP to HTTPS
      - --entrypoints.web.http.redirections.entryPoint.to=web-secure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      # Enable Dashboard
      - --api.dashboard=true
      - --api.insecure=true
      # Experimental Plugins
      - --experimental.plugins.rewrite-body.modulename=github.com/packruler/rewrite-body
      - --experimental.plugins.rewrite-body.version=v1.2.0
      - --experimental.plugins.rewriteHeaders.modulename=github.com/XciD/traefik-plugin-rewrite-headers
      - --experimental.plugins.rewriteHeaders.version=v0.0.3
      # ACME DNS-01 challenge setup (for obtaining SSL certificates)
      - --certificatesresolvers.myresolver.acme.dnschallenge=${DNS_CHALLENGE:-true}
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=${DNS_CHALLENGE_PROVIDER:-cloudflare}
      - --certificatesresolvers.myresolver.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesresolvers.myresolver.acme.caserver=${LETS_ENCRYPT_CA_SERVER:-https://acme-v02.api.letsencrypt.org/directory}
      # ACME configuration for Let's Encrypt
      - --certificatesresolvers.myresolver.acme.email=${LETS_ENCRYPT_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      # Enable Metrics for Prometheus
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.100000,0.300000,1.200000,5.000000
      - --metrics.prometheus.addEntryPointsLabels=true
      - --metrics.prometheus.addServicesLabels=true
      # Enable Tracing
      - --tracing.otlp=true
      # Logging configuration
      #- --log.level=INFO  # Set the log level to INFO
      #- --accesslog=true  # Enable access logs (logs all incoming HTTP requests)
      # Optional: Set a log file path (uncomment to enable)
      #- "--log.filepath=/var/log/traefik.log"  # Uncomment to log to a file
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik-dashboard.rule=(Host(`traefik.${DOMAIN}`))
      - traefik.http.routers.traefik-dashboard.service=api@internal
      - traefik.http.services.traefik-dashboard.loadbalancer.server.port=8080
      - traefik.http.routers.traefik-dashboard.middlewares=myauth
      - traefik.http.middlewares.myauth.basicauth.users=${TRAEFIK_FRONTEND_AUTH}
      - homepage.group=Admin
      - homepage.name=Traefik
      - homepage.icon=traefik.png
      - homepage.href=https://traefik.${DOMAIN}
      - homepage.description=Utilities
      - homepage.weight=4
      - homepage.widget.type=traefik
      - homepage.widget.url=http://traefik:8080
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${CONFIG_ROOT:-.}/letsencrypt:/letsencrypt
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    healthcheck:
      test: [ "CMD", "traefik", "healthcheck", "--ping" ]
      interval: 30s
      retries: 10
  ################################################################
  #                     Media Server                             #
  ################################################################
  sonarr:
    <<: *default-container
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    volumes:
      - ${CONFIG_ROOT:-.}/sonarr:/config
      - ${DATA_ROOT}:/data
      - ${MEDIA_ROOT}/tv:/tv
      - ${DOWNLOAD_ROOT}:/downloads
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8989/sonarr/ping" ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.sonarr.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/sonarr`))
      - traefik.http.routers.sonarr.tls=true
      - traefik.http.routers.sonarr.tls.certresolver=myresolver
      - traefik.http.services.sonarr.loadbalancer.server.port=8989
      - homepage.group=Media Management
      - homepage.name=Sonarr
      - homepage.icon=sonarr.png
      - homepage.href=/sonarr
      - homepage.description=Series management
      - homepage.weight=0
      - homepage.widget.type=sonarr
      - homepage.widget.url=http://sonarr:8989/sonarr
      - homepage.widget.key=${SONARR_API_KEY}
    profiles:
      - media_download
  radarr:
    <<: *default-container
    image: lscr.io/linuxserver/radarr
    container_name: radarr
    volumes:
      - ${CONFIG_ROOT:-.}/radarr:/config
      - ${DATA_ROOT}:/data
      - ${MEDIA_ROOT}/movies:/movies
      - ${DOWNLOAD_ROOT}:/downloads
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:7878/radarr/ping" ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.radarr.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/radarr`))
      - traefik.http.routers.radarr.tls=true
      - traefik.http.routers.radarr.tls.certresolver=myresolver
      - traefik.http.services.radarr.loadbalancer.server.port=7878
      - homepage.group=Media Management
      - homepage.name=Radarr
      - homepage.icon=radarr.png
      - homepage.href=/radarr
      - homepage.description=Movies management
      - homepage.weight=1
      - homepage.widget.type=radarr
      - homepage.widget.url=http://radarr:7878/radarr
      - homepage.widget.key=${RADARR_API_KEY}
    profiles:
      - media_download
  lidarr:
    <<: *default-container
    image: lscr.io/linuxserver/lidarr
    container_name: lidarr
    volumes:
      - ${CONFIG_ROOT:-.}/lidarr:/config
      - ${DATA_ROOT}:/data
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8686/lidarr/ping" ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.lidarr.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/lidarr`))
      - traefik.http.routers.lidarr.tls=true
      - traefik.http.routers.lidarr.tls.certresolver=myresolver
      - traefik.http.services.lidarr.loadbalancer.server.port=8686
      - homepage.group=Media Management
      - homepage.name=Lidarr
      - homepage.icon=lidarr.png
      - homepage.href=/lidarr
      - homepage.description=Music management
      - homepage.weight=2
      - homepage.widget.type=lidarr
      - homepage.widget.url=http://lidarr:8686/lidarr
      - homepage.widget.key=${LIDARR_API_KEY}
    profiles:
      - lidarr
  bazarr:
    <<: *default-container
    image: lscr.io/linuxserver/bazarr
    container_name: bazarr
    volumes:
      - ${CONFIG_ROOT:-.}/bazarr/config:/config
      - ${DATA_ROOT}:/data
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:6767/bazarr/ping" ]
      interval: 5s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.bazarr.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/bazarr`))
      - traefik.http.routers.bazarr.tls=true
      - traefik.http.routers.bazarr.tls.certresolver=myresolver
      - traefik.http.services.bazarr.loadbalancer.server.port=6767
      - homepage.group=Media Management
      - homepage.name=Bazarr
      - homepage.icon=bazarr.png
      - homepage.href=/bazarr
      - homepage.description=Subtitles management
      - homepage.weight=4
      - homepage.widget.type=bazarr
      - homepage.widget.url=http://bazarr:6767/bazarr
      - homepage.widget.key=${BAZARR_API_KEY}
    profiles:
      - media_download
  jellyseerr:
    image: fallenbagel/jellyseerr:latest
    container_name: jellyseerr
    environment:
      - LOG_LEVEL=debug
      - TZ=${TIMEZONE}
    volumes:
      - ${CONFIG_ROOT:-.}/jellyseerr:/app/config
    restart: "no"
    healthcheck:
      test: ["CMD", "wget", "http://127.0.0.1:5055/api/v1/status", "-qO", "/dev/null"]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyseerr.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/jellyseerr`))
      - traefik.http.routers.jellyseerr.tls=true
      - traefik.http.routers.jellyseerr.tls.certresolver=myresolver
      - traefik.http.services.jellyseerr.loadbalancer.server.port=5055
      - traefik.http.routers.jellyseerr.middlewares=jellyseerr-stripprefix,jellyseerr-rewrite,jellyseerr-rewriteHeaders
      - traefik.http.middlewares.jellyseerr-stripprefix.stripPrefix.prefixes=/jellyseerr
      - traefik.http.middlewares.jellyseerr-rewriteHeaders.plugin.rewriteHeaders.rewrites[0].header=location
      - traefik.http.middlewares.jellyseerr-rewriteHeaders.plugin.rewriteHeaders.rewrites[0].regex=^/(.+)$$
      - traefik.http.middlewares.jellyseerr-rewriteHeaders.plugin.rewriteHeaders.rewrites[0].replacement=/jellyseerr/$$1
      - traefik.http.middlewares.jellyseerr-rewriteHeaders.plugin.rewriteHeaders.rewrites[1].header=location
      - traefik.http.middlewares.jellyseerr-rewriteHeaders.plugin.rewriteHeaders.rewrites[1].regex=^/$$
      - traefik.http.middlewares.jellyseerr-rewriteHeaders.plugin.rewriteHeaders.rewrites[1].replacement=/jellyseerr
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.monitoring.types[0]=text/html
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.monitoring.types[1]=application/javascript
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.monitoring.types[2]=*/*
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[1].regex=/_next
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[1].replacement=/jellyseerr/_next
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[2].regex=\/_next\\/data\\//
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[2].replacement=\/jellyseerr\/_next\/data\//
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[3].regex=/api/v1
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[3].replacement=/jellyseerr/api/v1
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[4].regex=/login/plex/loading
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[4].replacement=/jellyseerr/login/plex/loading
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[5].regex=/images/
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[5].replacement=/jellyseerr/images/
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[6].regex=/favicon
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[6].replacement=/jellyseerr/favicon
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[7].regex=/logo_
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[7].replacement=/jellyseerr/logo_
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[8].regex=/site.webmanifest
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[8].replacement=/jellyseerr/site.webmanifest
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[9].regex=/sw.js
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[9].replacement=/jellyseerr/sw.js
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[10].regex=/offline.html
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[10].replacement=/jellyseerr/offline.html
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[11].regex=src="/os_logo_square.png"
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[11].replacement=src="/jellyseerr/os_logo_square.png"
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[12].regex=href([=:])"/([/a-zA-Z?=]*)"
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[12].replacement=href$$1"/jellyseerr/$$2"
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[13].regex=linkUrl:"/([/a-zA-Z?=]*)"
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[13].replacement=linkUrl:"/jellyseerr/$$1"
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[14].regex="/([a-z]+)/".concat
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[14].replacement="/jellyseerr/$$1/".concat
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[15].regex=url:"/([/a-zA-Z?=]*)"
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[15].replacement=url:"/jellyseerr/$$1"
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[16].regex=/imageproxy/
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[16].replacement=/jellyseerr/imageproxy/
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[17].regex=/avatarproxy/
      - traefik.http.middlewares.jellyseerr-rewrite.plugin.rewrite-body.rewrites[17].replacement=/jellyseerr/avatarproxy/
      - homepage.group=Media Management
      - homepage.name=JellySeerr
      - homepage.icon=jellyseerr.png
      - homepage.href=/jellyseerr
      - homepage.description=Content Recommendations and Request Management
      - homepage.weight=3
      - homepage.widget.type=jellyseerr
      - homepage.widget.url=http://jellyseerr:5055
      - homepage.widget.key=${JELLYSEERR_API_KEY}
    profiles:
      - media_download
  prowlarr:
    <<: *default-container
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    volumes:
      - ${CONFIG_ROOT:-.}/prowlarr:/config
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:9696/prowlarr/ping" ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.prowlarr.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/prowlarr`))
      - traefik.http.routers.prowlarr.tls=true
      - traefik.http.routers.prowlarr.tls.certresolver=myresolver
      - traefik.http.services.prowlarr.loadbalancer.server.port=9696
      - homepage.group=Media Management
      - homepage.name=Prowlarr
      - homepage.icon=prowlarr.png
      - homepage.href=/prowlarr
      - homepage.description=Indexers management
      - homepage.weight=1
      - homepage.widget.type=prowlarr
      - homepage.widget.url=http://prowlarr:9696/prowlarr
      - homepage.widget.key=${PROWLARR_API_KEY}
    profiles:
      - media_download
  flaresolverr:
    image: 21hsmw/flaresolverr:nodriver
    container_name: flaresolverr
    restart: "no"
    environment:
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_HTML=${LOG_HTML:-false}
      - CAPTCHA_SOLVER=${CAPTCHA_SOLVER:-none}
      - TZ=${TIMEZONE}
    labels:
      - traefik.enable=true
      - traefik.http.routers.flaresolverr.rule=PathPrefix(`/flaresolverr`)
      - traefik.http.routers.flaresolverr.tls=true
      - traefik.http.services.flaresolverr.loadbalancer.server.port=8191
    profiles:
      - flaresolverr
  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:libtorrentv1
    container_name: qbittorrent
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - WEBUI_PORT=8080
      - DOCKER_MODS=ghcr.io/gabe565/linuxserver-mod-vuetorrent
    volumes:
      - ${CONFIG_ROOT:-.}/qbittorrent:/config
      - ${DOWNLOAD_ROOT}:/downloads
    restart: "no"
    healthcheck:
      # Container may fail if the PIA's token expired, so mark as unhealthy when there is no internet connection
      # see: https://github.com/qdm12/gluetun/issues/641#issuecomment-933856220
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8080", "https://google.com" ]
      interval: 30s
      retries: 10
    network_mode: "service:vpn"
    depends_on:
      vpn:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.qbittorrent.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/qbittorrent`))
      - traefik.http.routers.qbittorrent.tls=true
      - traefik.http.routers.qbittorrent.tls.certresolver=myresolver
      - traefik.http.services.qbittorrent.loadbalancer.server.port=8080
      - traefik.http.routers.qbittorrent.middlewares=qbittorrent-strip-slash,qbittorrent-stripprefix
      # https://github.com/qbittorrent/qBittorrent/issues/5693#issuecomment-552146296
      - traefik.http.middlewares.qbittorrent-stripprefix.stripPrefix.prefixes=/qbittorrent
      # https://community.traefik.io/t/middleware-to-add-the-if-needed/1895/19
      - traefik.http.middlewares.qbittorrent-strip-slash.redirectregex.regex=(^.*\/qbittorrent$$)
      - traefik.http.middlewares.qbittorrent-strip-slash.redirectregex.replacement=$$1/
      - traefik.http.middlewares.qbittorrent-strip-slash.redirectregex.permanent=false
      #- com.centurylinklabs.watchtower.depends-on=/vpn
      - homepage.group=Media Management
      - homepage.name=qBittorrent
      - homepage.icon=qbittorrent.png
      - homepage.href=/qbittorrent
      - homepage.description=Bittorrent client
      - homepage.weight=2
      - homepage.widget.type=qbittorrent
      - homepage.widget.url=http://vpn:8080
      - homepage.widget.username=${QBITTORRENT_USERNAME}
      - homepage.widget.password=${QBITTORRENT_PASSWORD}
    profiles:
      - qbittorrent
#  vpn:
#    # Use semver tags or sha256 hashes of manifests.
#    # using latest tag can lead to issues when used with
#    # automatic image updaters like watchtower/podman.
#    image: ghcr.io/tprasadtp/protonwire:latest
#    container_name: vpn
#    volumes:
#      - type: tmpfs
#        target: /tmp
#    cap_add:
#      - NET_ADMIN # NET_ADMIN capability is mandatory!
#    environment:
#      PROTONVPN_SERVER: ${PROTONVPN_SERVER}  # Quote this value as server name can contain '#'. # NL-FREE#100070
#      DEBUG: "0" # Set this to 1 to show debug logs for issue forms.
#      KILL_SWITCH: "1" # Set this to 0 to disable kill-switch.
#      WIREGUARD_PRIVATE_KEY: ${WIREGUARD_PRIVATE_KEY}
    # sysctl net.ipv4.conf.all.rp_filter is mandatory!
    # net.ipv6.conf.all.disable_ipv6 disables IPv6 as protonVPN does not support IPv6.
    # 'net.*' sysctls are not required on application containers,
    # as they share network stack with protonwire container.
#    sysctls:
#      net.ipv4.conf.all.rp_filter: 2
#      net.ipv6.conf.all.disable_ipv6: 1
#    healthcheck:
#      test: ping -c 1 www.google.com || exit 1
#      interval: 30s
#      timeout: 10s
#      retries: 3
#    init: true
#    restart: "no"
#    ports:
#      - 8000:80
  vpn:
    image: qmcgaw/gluetun:v3
    container_name: vpn
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun:/dev/net/tun
    volumes:
      - ${CONFIG_ROOT:-.}/gluetun:/config
      - ${CONFIG_ROOT:-.}/gluetun/port:/tmp/gluetun
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - VPN_SERVICE_PROVIDER=${VPN_SERVICE_PROVIDER}
      - VPN_TYPE=${VPN_TYPE}
      - WIREGUARD_PRIVATE_KEY=${WIREGUARD_PRIVATE_KEY}
      - SERVER_COUNTRIES=${SERVER_COUNTRIES}
    restart: "no"
    healthcheck:
      test: ping -c 1 www.google.com || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - vpn
  unpackerr:
    image: golift/unpackerr:latest
    container_name: unpackerr
    volumes:
      - ${DOWNLOAD_ROOT}:/data/torrents
    restart: "no"
    user: ${USER_ID}:${GROUP_ID}
    environment:
      - TZ=${TIMEZONE}
      - UN_SONARR_0_URL=http://sonarr:8989/sonarr
      - UN_SONARR_0_API_KEY=${SONARR_API_KEY}
      - UN_RADARR_0_URL=http://radarr:7878/radarr
      - UN_RADARR_0_API_KEY=${RADARR_API_KEY}
    security_opt:
      - no-new-privileges:true
    profiles:
      - media_download
  sabnzbd:
    <<: *default-container
    image: lscr.io/linuxserver/sabnzbd:latest
    container_name: sabnzbd
    volumes:
      - ${CONFIG_ROOT:-.}/sabnzbd:/config
      - ${DATA_ROOT}:/data
    labels:
      - traefik.enable=true
      - traefik.http.routers.sabnzbd.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/sabnzbd`) || PathPrefix(`/sabnzbd`))
      - traefik.http.routers.sabnzbd.tls=true
      - traefik.http.routers.sabnzbd.tls.certresolver=myresolver
      - traefik.http.services.sabnzbd.loadbalancer.server.port=8080
      - homepage.group=Media Management
      - homepage.name=Sabnzbd
      - homepage.icon=sabnzbd.png
      - homepage.href=/sabnzbd
      - homepage.description=Usenet
      - homepage.weight=3
      - homepage.widget.type=sabnzbd
      - homepage.widget.url=http://sabnzbd:8080/sabnzbd
      - homepage.widget.key=${SABNZBD_API_KEY}
    profiles:
      - sabnzbd
  jellyfin:
    image: lscr.io/linuxserver/jellyfin:latest
    container_name: jellyfin
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - JELLYFIN_PublishedServerUrl=${HOSTNAME}/jellyfin
    volumes:
      - ${CONFIG_ROOT:-.}/jellyfin:/config
      - ${DATA_ROOT}:/data
      - ${MEDIA_ROOT}/movies:/movies:rw
      - ${MEDIA_ROOT}/tv:/tv:rw
      - ${MEDIA_ROOT}/music:/music:rw
    ports:
      - "7359:7359/udp"
      - "1900:1900/udp"
    restart: "no"
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://127.0.0.1:8096/jellyfin/health" ]
      interval: 30s
      retries: 10
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellyfin.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/jellyfin`))
      - traefik.http.routers.jellyfin.tls=true
      - traefik.http.routers.jellyfin.tls.certresolver=myresolver
      - traefik.http.services.jellyfin.loadbalancer.server.port=8096
      - homepage.group=Media
      - homepage.name=Jellyfin
      - homepage.icon=jellyfin.png
      - homepage.href=/jellyfin
      - homepage.description=Media server
      - homepage.weight=4
      - homepage.widget.type=jellyfin
      - homepage.widget.url=http://jellyfin:8096/jellyfin
      - homepage.widget.key=${JELLYFIN_API_KEY}
      - homepage.widget.enableBlocks=true
      - homepage.widget.enableNowPlaying=true
      - homepage.widget.enableUser=true
      - homepage.widget.showEpisodeNumber=true
      - homepage.widget.expandOneStreamToTwoRows=false
  ################################################################
  #                       Books                                  #
  ################################################################
  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre-web
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - ${CONFIG_ROOT:-.}/calibre-web:/config
      - ${MEDIA_ROOT}/books:/books
    restart: "no"
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.calibre-headers.headers.customRequestHeaders.X-Scheme=https
      - traefik.http.middlewares.calibre-headers.headers.customRequestHeaders.X-Script-Name=/calibre
      - traefik.http.middlewares.calibre-stripprefixregex.stripPrefixRegex.regex=/calibre
      - traefik.http.routers.calibre.middlewares=calibre-headers,calibre-stripprefixregex
      - traefik.http.routers.calibre.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/calibre`))
      - traefik.http.routers.calibre.tls=true
      - traefik.http.routers.calibre.tls.certresolver=myresolver
      - traefik.http.services.calibre.loadbalancer.server.port=8083
      - homepage.group=Media
      - homepage.name=Calibre-Web
      - homepage.icon=calibre-web.png
      - homepage.href=/calibre
      - homepage.description=Books management
      - homepage.weight=5
      - homepage.widget.type=calibreweb
      - homepage.widget.url=http://calibre-web:8083
      - homepage.widget.username=${CALIBRE_USERNAME}
      - homepage.widget.password=${CALIBRE_PASSWORD}
    profiles:
      - calibre-web
  calibre-web-automated:
    image: crocodilestick/calibre-web-automated:latest
    container_name: cwa
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - DOCKER_MODS=linuxserver/mods:universal-calibre
      - OAUTHLIB_RELAX_TOKEN_SCOPE=1
    volumes:
      - ${CONFIG_ROOT:-.}/calibre-web-automated/config:/config
      - ${DOWNLOAD_ROOT_NOBRL}/book-ingest:/cwa-book-ingest
#      - /tmp/data/calibre-web/ingest:/cwa-book-ingest
      - ${MEDIA_ROOT_NOBRL}/books/calibre-library:/calibre-library
    restart: "no"
    labels:
      - traefik.enable=true
      - traefik.http.routers.cwa.rule=Host(`cwa.${DOMAIN}`)
      - traefik.http.routers.cwa.tls=true
      - traefik.http.routers.cwa.tls.certresolver=myresolver
      - traefik.http.services.cwa.loadbalancer.server.port=8083
      - homepage.group=Media
      - homepage.name=Calibre-Web-Automated
      - homepage.icon=calibre-web.png
      - homepage.href=https://cwa.${DOMAIN}
      - homepage.description=Books management
      - homepage.weight=5
      - homepage.widget.type=calibreweb
      - homepage.widget.url=http://cwa:8083
      - homepage.widget.username=${CALIBRE_USERNAME}
      - homepage.widget.password=${CALIBRE_PASSWORD}
    profiles:
      - cwa
  cwad:
    image: ghcr.io/calibrain/calibre-web-automated-book-downloader:latest
    container_name: cwad
    environment:
      - PUID=${USER_ID}
      - PGID=${GROUP_ID}
      - TZ=${TIMEZONE}
      - FLASK_PORT=8084
      - FLASK_DEBUG='true'
      - CLOUDFLARE_PROXY_URL=${CLOUDFLARE_PROXY_URL}
      - INGEST_DIR=${INGEST_DIR}
      - BOOK_LANGUAGE=${BOOK_LANGUAGE}
    volumes:
      - ${DOWNLOAD_ROOT_NOBRL}/book-ingest-cwa:${INGEST_DIR:-/cwa-book-ingest}
      #- /tmp/data/calibre-web/ingest:${INGEST_DIR:-/cwa-book-ingest}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/request/api/status"]
      interval: 30s
      timeout: 30s
      retries: 3
      start_period: 5s
    restart: "no"
    labels:
      - traefik.enable=true
      - traefik.http.routers.cwad.rule=(Host(`cwad.${DOMAIN}`))
      - traefik.http.routers.cwad.tls=true
      - traefik.http.routers.cwad.tls.certresolver=myresolver
      - traefik.http.services.cwad.loadbalancer.server.port=8084
      - homepage.group=Media Management
      - homepage.name=Calibre-Web-Automated-Downloader
      - homepage.icon=calibre-web.png
      - homepage.href=https://cwad.${DOMAIN}
      - homepage.description=Books management
      - homepage.weight=5
    profiles:
      - cwad
  cloudflarebypassforscraping:
    image: ghcr.io/sarperavci/cloudflarebypassforscraping:latest
    container_name: cloudflarebypassforscraping
    restart: "no"
    profiles:
      - cloudflarebypassforscraping
  homepage:
    image: ghcr.io/gethomepage/homepage:latest
    container_name: homepage
    environment:
      - HOMEPAGE_VAR_TITLE=${HOMEPAGE_VAR_TITLE}
      - HOMEPAGE_VAR_SEARCH_PROVIDER=${HOMEPAGE_VAR_SEARCH_PROVIDER}
      - HOMEPAGE_VAR_HEADER_STYLE=${HOMEPAGE_VAR_HEADER_STYLE}
      - HOMEPAGE_VAR_WEATHER_CITY=${HOMEPAGE_VAR_WEATHER_CITY}
      - HOMEPAGE_VAR_WEATHER_LAT=${HOMEPAGE_VAR_WEATHER_LAT}
      - HOMEPAGE_VAR_WEATHER_LONG=${HOMEPAGE_VAR_WEATHER_LONG}
      - HOMEPAGE_VAR_WEATHER_TIME=${TIMEZONE}
      - HOMEPAGE_VAR_WEATHER_UNIT=${HOMEPAGE_VAR_WEATHER_UNIT}
    volumes:
      - ${CONFIG_ROOT:-.}/homepage:/app/config
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${DATA_ROOT}:/data
    restart: "no"
    command: [sh, -c, "cp -n /app/config/tpl/*.yaml /app/config && node server.js"]
    labels:
      - traefik.enable=true
      - traefik.http.routers.homepage.rule=(Host(`${HOSTNAME}`) && PathPrefix(`/`))
      - traefik.http.routers.homepage.tls=true
      - traefik.http.routers.homepage.tls.certresolver=myresolver
      - traefik.http.services.homepage.loadbalancer.server.port=3000
  watchtower:
    image: containrrr/watchtower
    container_name: watchtower
    restart: "no"
    environment:
      - WATCHTOWER_CLEANUP=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  autoheal:
    image: willfarrell/autoheal:latest
    container_name: autoheal
    restart: "no"
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  cabernet:
    <<: *default-container
    container_name: cabernet
    image: ghcr.io/cabernetwork/cabernet:latest
    volumes:
      - ${CONFIG_ROOT:-.}/cabernet/data:/app/data
      - ${CONFIG_ROOT:-.}/cabernet/plugins_ext:/app/plugins_ext
      - ${CONFIG_ROOT:-.}/cabernet/secrets:/app/.cabernet
    labels:
      - traefik.enable=true
      - traefik.http.routers.cabernet.rule=(Host(`cabernet.${DOMAIN}`))
      - traefik.http.routers.cabernet.tls=true
      - traefik.http.routers.cabernet.tls.certresolver=myresolver
      - traefik.http.services.cabernet.loadbalancer.server.port=6077
    profiles:
      - cabernet
  iptv-app:
    container_name: iptv-app
    image: arbupo/free-iptv-channels
    profiles:
      - iptv
  portainer: # Portainer helps debugging and monitors the containers
    <<: *default-container
    image: portainer/portainer-ce
    container_name: portainer
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${CONFIG_ROOT:-.}/portainer:/data
    restart: "no"
    labels:
      - traefik.enable=true
      - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)
      - traefik.http.routers.portainer.tls=true
      - traefik.http.routers.portainer.tls.certresolver=myresolver
      - traefik.http.services.portainer.loadbalancer.server.port=9000
      - homepage.group=Admin
      - homepage.name=Portainer
      - homepage.icon=portainer.png
      - homepage.href=https://portainer.${DOMAIN}
      - homepage.description=Utilities
      - homepage.weight=4
      - homepage.widget.type=portainer
      - homepage.widget.url=http://portainer:9000
      - homepage.widget.env=2
      - homepage.widget.key=${HOMEPAGE_VAR_PORTAINER_API_KEY}
    profiles:
      - portainer
  beszel:
    image: 'henrygd/beszel'
    container_name: 'beszel'
    restart: "no"
    volumes:
      - ${CONFIG_ROOT:-.}/beszel/data:/beszel_data
    labels:
      - traefik.enable=true
      - traefik.http.routers.beszel.rule=Host(`beszel.${DOMAIN}`)
      - traefik.http.routers.beszel.tls=true
      - traefik.http.routers.beszel.tls.certresolver=myresolver
      - traefik.http.services.beszel.loadbalancer.server.port=8090
      - homepage.group=Admin
      - homepage.name=Beszel
      - homepage.icon=beszel.png
      - homepage.href=https://beszel.${DOMAIN}
      - homepage.description=Utilities
      - homepage.weight=4
      - homepage.widget.type=beszel
      - homepage.widget.url=http://beszel:8090
      - homepage.widget.username=${BESZEL_USERNAME}
      - homepage.widget.password=${BESZEL_PASSWORD}
      - homepage.widget.version=2
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    profiles:
      - beszel
  beszel-agent:
    image: 'henrygd/beszel-agent'
    container_name: 'beszel-agent'
    restart: "no"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # monitor other disks / partitions by mounting a folder in /extra-filesystems
      # - /mnt/disk/.beszel:/extra-filesystems/sda1:ro
    environment:
      PORT: 45876
      # FILESYSTEM: /dev/sda1 # set to the correct filesystem for disk I/O stats
      KEY: ${BESZEL_KEY}
    profiles:
      - beszel
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--web.config.file=/etc/prometheus/web.yml'
    restart: "no"
    volumes:
      - ${CONFIG_ROOT:-.}/prometheus:/etc/prometheus
      - prom_data:/prometheus
    labels:
      - traefik.enable=true
      - traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN}`)
      - traefik.http.routers.prometheus.tls=true
      - traefik.http.routers.prometheus.tls.certresolver=myresolver
      - traefik.http.services.prometheus.loadbalancer.server.port=9090
      - homepage.group=Admin
      - homepage.name=Prometheus
      - homepage.icon=prometheus.png
      - homepage.href=https://prometheus.${DOMAIN}
      - homepage.description=Observability
      - homepage.weight=4
      - homepage.widget.type=prometheus
      - homepage.widget.url=http://prometheus:9090/
      - homepage.widget.username=${PROMETHEUS_USERNAME}
      - homepage.widget.password=${PROMETHEUS_PASSWORD}
    profiles:
      - prometheus
  loki:
    image: grafana/loki:latest
    container_name: loki
    volumes:
      - ${CONFIG_ROOT:-.}/loki/loki-config.yml:/etc/loki/loki-config.yml
    restart: "no"
    command: -config.file=/etc/loki/loki-config.yml
    ports:
      - "3100:3100"
    labels:
      - traefik.enable=true
      - traefik.http.routers.loki.rule=Host(`loki.${DOMAIN}`)
      - traefik.http.routers.loki.tls=true
      - traefik.http.routers.loki.tls.certresolver=myresolver
      - traefik.http.services.loki.loadbalancer.server.port=3100
    profiles:
      - loki
  promtail:
    image: grafana/promtail:latest
    container_name: promtail
    restart: "no"
    volumes:
      - /var/log:/var/log
      - ${CONFIG_ROOT:-.}/promtail/promtail-config.yml:/etc/promtail/promtail-config.yml
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: -config.file=/etc/promtail/promtail-config.yml
    depends_on:
      - loki
    profiles:
      - loki
  prowlarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: prowlarr-exporter
    command: ["prowlarr"]
    environment:
      PORT: 9710
      URL: "http://prowlarr:9696/prowlarr" # or; http://prowlarr:8080
      APIKEY: ${PROWLARR_API_KEY}
      # PROWLARR__BACKFILL: true # optional
      # PROWLARR__BACKFILL_SINCE_DATE: "2023-03-01" # optional
    restart: "no"
  radarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: radarr-exporter
    command: ["radarr"]
    environment:
      PORT: 9708
      URL: "http://radarr:7878/radarr" # or; http://radarr:7878
      APIKEY: ${RADARR_API_KEY}
    restart: "no"
  sonarr-exporter:
    image: ghcr.io/onedr0p/exportarr:v2.0
    container_name: sonarr-exporter
    command: ["sonarr"]
    environment:
      PORT: 9707
      URL: "http://sonarr:8989/sonarr" # or; http://sonarr:8989
      APIKEY: ${SONARR_API_KEY}
    restart: "no"
  json-exporter:
    image: quay.io/prometheuscommunity/json-exporter
    container_name: json-exporter
    volumes:
      - ${CONFIG_ROOT:-.}/json_exporter/json-exporter-config.yml:/config.yml:ro
    restart: "no"
  jellystat-db:
    image: postgres:15.2
    shm_size: '1gb'
    container_name: jellystat-db
    restart: "no"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypassword
    volumes:
      - postgres-data:/var/lib/postgresql/data
    profiles:
      - jellystat
  jellystat:
    image: cyfershepard/jellystat:latest
    container_name: jellystat
    restart: "no"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mypassword
      POSTGRES_IP: jellystat-db
      POSTGRES_PORT: 5432
      JWT_SECRET: "my-secret-jwt-key"
      TZ: mytimezone # timezone (ex: Europe/Paris)
    volumes:
      - jellystat-backup-data:/app/backend/backup-data
    depends_on:
      - jellystat-db
    labels:
      - traefik.enable=true
      - traefik.http.routers.jellystat.rule=Host(`jellystat.${DOMAIN}`)
      - traefik.http.routers.jellystat.tls=true
      - traefik.http.routers.jellystat.tls.certresolver=myresolver
      - traefik.http.services.jellystat.loadbalancer.server.port=3000
      - homepage.group=Media
      - homepage.name=Jellystat
      - homepage.icon=jellystat.png
      - homepage.href=/jellystat
      - homepage.description=Media server
      - homepage.weight=4
      - homepage.widget.type=jellyfin
      - homepage.widget.url=http://jellystat:3000/jellystat
      - homepage.widget.key=${JELLYFIN_API_KEY}
    profiles:
      - jellystat
  waf:
    image: owasp/modsecurity-crs:apache
    container_name: waf
    restart: "no"
    environment:
      PARANOIA: 1
      ANOMALY_INBOUND: 10
      ANOMALY_OUTBOUND: 5
      PROXY: 1
      REMOTEIP_INT_PROXY: "172.20.0.1/16"
      BACKEND: "http://vaultwarden:80"
      BACKEND_WS: "ws://vaultwarden:80/notifications/hub"
      ERRORLOG: "/var/log/waf/waf.log"
    volumes:
     - ${CONFIG_ROOT:-.}/waf:/var/log/waf
     - ${CONFIG_ROOT:-.}/waf/waf-rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf:/etc/modsecurity.d/owasp-crs/rules/REQUEST-900-EXCLUSION-RULES-BEFORE-CRS.conf
     - ${CONFIG_ROOT:-.}/waf/waf-rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf:/etc/modsecurity.d/owasp-crs/rules/RESPONSE-999-EXCLUSION-RULES-AFTER-CRS.conf
    labels:
      - traefik.enable=true
      - traefik.http.middlewares.redirect-https.redirectScheme.scheme=https
      - traefik.http.middlewares.redirect-https.redirectScheme.permanent=true
      - traefik.http.routers.vw-ui-https.rule=Host(`${VAULTWARDEN_DOMAIN}`)
      - traefik.http.routers.vw-ui-https.entrypoints=web-secure
      - traefik.http.routers.vw-ui-https.tls=true
      - traefik.http.routers.vw-ui-https.service=vw-ui
      - traefik.http.routers.vw-ui-http.rule=Host(`${VAULTWARDEN_DOMAIN}`)
      - traefik.http.routers.vw-ui-http.entrypoints=web
      - traefik.http.routers.vw-ui-http.middlewares=redirect-https
      - traefik.http.routers.vw-ui-http.service=vw-ui
      - traefik.http.routers.vw-ui-https.tls.certresolver=myresolver
      - traefik.http.services.vw-ui.loadbalancer.server.port=8080
      - traefik.http.routers.vw-websocket-https.rule=Host(`${VAULTWARDEN_DOMAIN}`) && Path(`/notifications/hub`)
      - traefik.http.routers.vw-websocket-https.entrypoints=web-secure
      - traefik.http.routers.vw-websocket-https.tls=true
      - traefik.http.routers.vw-websocket-https.service=vw-websocket
      - traefik.http.routers.vw-websocket-http.rule=Host(`${VAULTWARDEN_DOMAIN}`) && Path(`/notifications/hub`)
      - traefik.http.routers.vw-websocket-http.entrypoints=web
      - traefik.http.routers.vw-websocket-http.middlewares=redirect-https
      - traefik.http.routers.vw-websocket-http.service=vw-websocket
      - traefik.http.routers.vw-websocket-https.tls.certresolver=myresolver
      - traefik.http.services.vw-websocket.loadbalancer.server.port=3012
      - homepage.group=Main
      - homepage.name=Vaultwarden
      - homepage.icon=vaultwarden-light.png
      - homepage.href=https://vaultwarden.${DOMAIN}
      - homepage.description=Passwords
      - homepage.weight=4
    profiles:
      - vaultwarden
  vaultwarden:
    <<: *default-container
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: "no"
    environment:
      WEBSOCKET_ENABLED: "true"
      SENDS_ALLOWED: "true"
      PASSWORD_ITERATIONS: 500000
      SIGNUPS_ALLOWED: "true"
      SIGNUPS_VERIFY: "true"
      ADMIN_TOKEN: ${ADMIN_TOKEN}
#      DOMAIN: "SMTP domain host name"
#      SMTP_HOST: "smtp server"
#      SMTP_FROM: "sender email e.g: holu@example.com"
#      SMTP_FROM_NAME: "sender name"
#      SMTP_SECURITY: "starttls"
#      SMTP_PORT: 587
#      SMTP_USERNAME: "smtp username"
#      SMTP_PASSWORD: "smtp password"
#      SMTP_TIMEOUT: 15
      LOG_FILE: "/data/vaultwarden.log"
      LOG_LEVEL: "warn"
      EXTENDED_LOGGING: "true"
      TZ: "${TZ}"
    volumes:
      - ${CONFIG_ROOT:-.}/vaultwarden/data:/data
    profiles:
      - vaultwarden
  fail2ban:
    container_name: fail2ban
    restart: "no"
    image: crazymax/fail2ban:latest
    environment:
      - F2B_LOG_PATH=/var/log/auth.log  # Path to SSH log file (adjust for your containerized SSH server)
      - F2B_SSH_ACTION=iptables-multiport
      - F2B_SSH_PORT=22
      - F2B_IGNORE_IP=127.0.0.1
      - TZ=Europe/Paris
      - F2B_DB_PURGE_AGE=30d
      - F2B_LOG_LEVEL=INFO
    volumes:
      - /var/log:/var/log:ro
      - ${CONFIG_ROOT:-.}/fail2ban:/data
    privileged: true
    cap_add:
      - NET_ADMIN
      - NET_RAW
    network_mode: host
    profiles:
      - fail2ban
  authelia:
    image: 'authelia/authelia'
    container_name: authelia
    volumes:
      - ${CONFIG_ROOT:-.}/authelia/secrets:/secrets:ro
      - ${CONFIG_ROOT:-.}/authelia/config:/config
      - ${CONFIG_ROOT:-.}/authelia/logs:/var/log/authelia/
    labels:
      ## Expose Authelia through Traefik
      traefik.enable: 'true'
      traefik.http.routers.authelia.rule: 'Host(`authelia.nosoupforyou.xyz`)'
      traefik.http.routers.authelia.entrypoints: 'https'
      traefik.http.routers.authelia.tls: 'true'
      traefik.http.routers.authelia.tls.options: 'default'
      ## Setup Authelia ForwardAuth Middlewares
      traefik.http.middlewares.authelia.forwardauth.address: 'http://authelia:9091/api/authz/forward-auth'  # yamllint disable-line rule:line-length
      traefik.http.middlewares.authelia.forwardauth.trustForwardHeader: 'true'
      traefik.http.middlewares.authelia.forwardauth.authResponseHeaders: 'Remote-User,Remote-Groups,Remote-Name,Remote-Email'  # yamllint disable-line rule:line-length
    restart: 'no'
    healthcheck:
      ## In production the healthcheck section should be commented.
      disable: true
    environment:
      TZ: 'America/Los_Angeles'
    profiles:
      - authelia
  whoami:
    image: "traefik/whoami"
    container_name: "simple-service"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.aloni.site`)"
      - "traefik.http.routers.whoami.entrypoints=web-secure"
      - "traefik.http.routers.whoami.tls.certresolver=myresolver"
    profiles:
      - whoami
  jaeger:
    image: jaegertracing/all-in-one:1.35
    container_name: jaeger
#    ports:
#      - "5775:5775"   # Zipkin Thrift over UDP
#      - "6831:6831/udp" # Jaeger Thrift over UDP
#      - "6832:6832/udp" # Jaeger Thrift over UDP
#      - "5778:5778"     # HTTP Port
#      - "16686:16686"   # Jaeger UI (Web Interface)
#      - "14268:14268"   # Jaeger HTTP Endpoint
#      - "14250:14250"   # Jaeger gRPC
    environment:
      - COLLECTOR_ZIPKIN_HTTP_HTTP_PORT=9411
    restart: "no"
    labels:
      - "traefik.enable=true"  # Enable Traefik for this service
      - "traefik.http.routers.jaeger.rule=Host(`jaeger-http.${DOMAIN}`)"  # Define a routing rule for Jaeger
      - "traefik.http.services.jaeger.loadbalancer.server.port=5778"  # Expose the HTTP port (default Jaeger UI port)
      - "traefik.http.routers.jaeger.entrypoints=web,web-secure"  # Enable HTTP and HTTPS entrypoints for Traefik
      - "traefik.http.routers.jaeger.tls=true"  # Enable TLS for secure access
    profiles:
      - jaeger
  monitoring:
    image: nicolargo/glances:dev
    container_name: glances
    restart: "no"
    pid: host
    privileged: true
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ${CONFIG_ROOT:-.}/glances/glances.conf:/glances/conf/glances.conf
    environment:
      - TZ=${TIMEZONE}
      - "GLANCES_OPT=-C /glances/conf/glances.conf -w"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jaeger.rule=Host(`glances.${DOMAIN}`)"
      - "traefik.http.services.glances.loadbalancer.server.port=61208"
      - "traefik.http.routers.glances.entrypoints=web,web-secure"
      - "traefik.http.routers.glances.tls=true"
    profiles:
      - glances
  uptime-kuma:
    container_name: uptime-kuma
    image: louislam/uptime-kuma:1
    volumes:
      - ${CONFIG_ROOT:-.}/uptime-kuma/data:/app/data
#      - ${CONFIG_ROOT:-.}/uptime-kuma/server:/app/server
#      - ${CONFIG_ROOT:-.}/uptime-kuma/db:/app/db
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - traefik.enable=true
      - traefik.http.routers.uptime-kuma.rule=Host(`uptime-kuma.${DOMAIN}`)
      - traefik.http.routers.uptime-kuma.tls=true
      - traefik.http.routers.uptime-kuma.tls.certresolver=myresolver
      - traefik.http.services.uptime-kuma.loadbalancer.server.port=3001
      - homepage.group=Admin
      - homepage.name=Uptimekuma
      - homepage.icon=uptime-kuma.png
      - homepage.href=https://uptime-kuma.${DOMAIN}
      - homepage.description=Monitoring
      - homepage.weight=0
      - homepage.widget.type=uptimekuma
      - homepage.widget.url=http://uptime-kuma:3001
      - homepage.widget.slug=app
  vikunja:
    <<: *default-container
    image: vikunja/vikunja
    container_name: vikunja
    environment:
      VIKUNJA_SERVICE_PUBLICURL: https://vikunja.nosoupforyou.xyz
      VIKUNJA_DATABASE_HOST: vikunja-db
      VIKUNJA_DATABASE_PASSWORD: changeme
      VIKUNJA_DATABASE_TYPE: mysql
      VIKUNJA_DATABASE_USER: vikunja
      VIKUNJA_DATABASE_DATABASE: vikunja
      VIKUNJA_SERVICE_JWTSECRET: test134
    volumes:
      - ${CONFIG_ROOT:-.}/vikunja/files:/app/vikunja/files
    depends_on:
      vikunja-db:
        condition: service_healthy
    restart: "no"
    labels:
      - traefik.enable=true
      - traefik.http.routers.vikunja.rule=Host(`vikunja.${DOMAIN}`)
      - traefik.http.routers.vikunja.tls=true
      - traefik.http.routers.vikunja.tls.certresolver=myresolver
      - traefik.http.services.vikunja.loadbalancer.server.port=3456
      - homepage.group=Main
      - homepage.name=Vikunja
      - homepage.icon=vikunja.png
      - homepage.href=https://vikunja.${DOMAIN}
      - homepage.description=Task management
      - homepage.weight=0
      - homepage.widget.type=vikunja
      - homepage.widget.url=http://vikunja:3456
      - homepage.widget.key=${VIKUNJA_API_KEY}
    profiles:
      - vikunja
  vikunja-db:
    image: mariadb:10
    container_name: vikunja-db
    command: --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ROOT_PASSWORD: supersupersecret
      MYSQL_USER: vikunja
      MYSQL_PASSWORD: changeme
      MYSQL_DATABASE: vikunja
    volumes:
      - ${CONFIG_ROOT:-.}/vikunja/db:/var/lib/mysql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u $$MYSQL_USER --password=$$MYSQL_PASSWORD"]
      interval: 2s
      start_period: 30s
    profiles:
      - vikunja
  silverbullet:
    image: ghcr.io/silverbulletmd/silverbullet
    container_name: silverbullet
    restart: "no"
    environment:
      - SB_USER=admin:Clavelinas123
    volumes:
      - ${CONFIG_ROOT:-.}/silverbullet/space:/space
    labels:
      - traefik.enable=true
      - traefik.http.routers.sb.rule=(Host(`silverbullet.${DOMAIN}`))
      - traefik.http.routers.sb.tls=true
      - traefik.http.routers.sb.tls.certresolver=myresolver
      - traefik.http.services.sb.loadbalancer.server.port=3000
      - homepage.group=Main
      - homepage.name=Silverbullet
      - homepage.icon=silverbullet.png
      - homepage.href=https://silverbullet.${DOMAIN}
      - homepage.description=Note taking
    profiles:
      - silverbullet
  audiobookshelf:
    <<: *default-container
    image: ghcr.io/advplyr/audiobookshelf:latest
    container_name: abs
    volumes:
      - ${MEDIA_ROOT}/audiobooks:/audiobooks
      - ${MEDIA_ROOT}/podcasts:/podcasts
      - ${CONFIG_ROOT:-.}/abs/metadata:/metadata
      - ${CONFIG_ROOT:-.}/abs/config:/config
    labels:
      - traefik.enable=true
      - traefik.http.routers.abs.rule=(Host(`abs.${DOMAIN}`))
      - traefik.http.routers.abs.tls=true
      - traefik.http.routers.abs.tls.certresolver=myresolver
      - traefik.http.services.abs.loadbalancer.server.port=80
      - homepage.group=Media
      - homepage.name=AudioBookShelf
      - homepage.icon=audiobookshelf.png
      - homepage.href=https://abs.${DOMAIN}
      - homepage.description=AudioBooks/Podcast management
      - homepage.weight=5
      - homepage.widget.type=audiobookshelf
      - homepage.widget.url=http://abs:80
      - homepage.widget.key=${ABS_API_KEY}
    restart: "no"
    profiles:
      - abs
  web:
    image: ghcr.io/hoarder-app/hoarder:${HOARDER_VERSION:-release}
    container_name: hoarder
    restart: "no"
    volumes:
      - ${CONFIG_ROOT:-.}/hoarder/data:/data
    env_file:
      - .hoarder.env
    environment:
      MEILI_ADDR: http://meilisearch:7700
      BROWSER_WEB_URL: http://chrome:9222
      # OPENAI_API_KEY: ...
      DATA_DIR: /data
    labels:
      - traefik.enable=true
      - traefik.http.routers.hoarder.rule=(Host(`hoarder.${DOMAIN}`))
      - traefik.http.routers.hoarder.tls=true
      - traefik.http.routers.hoarder.tls.certresolver=myresolver
      - traefik.http.services.hoarder.loadbalancer.server.port=3000
      - homepage.group=Main
      - homepage.name=Hoarder
      - homepage.icon=hoarder.png
      - homepage.href=https://hoarder.${DOMAIN}
      - homepage.description=Bookmarks management
      - homepage.weight=5
    profiles:
      - hoarder
  chrome:
    image: gcr.io/zenika-hub/alpine-chrome:123
    restart: "no"
    command:
      - --no-sandbox
      - --disable-gpu
      - --disable-dev-shm-usage
      - --remote-debugging-address=0.0.0.0
      - --remote-debugging-port=9222
      - --hide-scrollbars
    profiles:
      - hoarder
  meilisearch:
    image: getmeili/meilisearch:v1.11.1
    restart: "no"
    env_file:
      - .env
    environment:
      MEILI_NO_ANALYTICS: "true"
    volumes:
      - meilisearch:/meili_data
    profiles:
      - hoarder
  tailscale-authkey1:
    image: tailscale/tailscale:latest
    container_name: ts-authkey-test
    hostname: banana
    environment:
      - TS_AUTHKEY=tskey-auth-kRu2tCCjA521CNTRL-df9dcjKe8RMUXu1MFUgrQMazunDMfNcZ
      - TS_STATE_DIR=/var/lib/tailscale
      - TS_USERSPACE=false
    volumes:
      - ts-authkey-test:/var/lib/tailscale
    devices:
      - /dev/net/tun:/dev/net/tun
    cap_add:
      - net_admin
    restart: "no"
    labels:
      - homepage.group=Admin
      - homepage.name=Tailscale
      - homepage.icon=tailscale.png
      - homepage.weight=5
      - homepage.widget.type=tailscale
      - homepage.widget.deviceid=njajigLhcA21CNTRL
      - homepage.widget.key=tskey-api-k78NypEqms11CNTRL-94XfdqzcRxS2siwz3ocKxSMZLnZuSCV8A
  nginx-authkey-test:
    image: nginx
    network_mode: service:tailscale-authkey1
  node_exporter:
    image: quay.io/prometheus/node-exporter:latest
    container_name: node_exporter
    command:
      - '--path.rootfs=/host'
#    network_mode: host
    pid: host
    restart: unless-stopped
    volumes:
      - '/:/host:ro,rslave'
    labels:
      - traefik.enable=true
      - traefik.http.routers.node-exporter.rule=(Host(`node-exporter.${DOMAIN}`))
      - traefik.http.routers.node-exporter.tls=true
      - traefik.http.routers.noder-exporter.tls.certresolver=myresolver
      - traefik.http.services.node-exporter.loadbalancer.server.port=9100
    profiles:
      - node-exporter

volumes:
  prom_data:
  postgres-data:
  jellystat-backup-data:
  meilisearch:
  ts-authkey-test:
    driver: local
networks:
  default:
    name: docker-compose-nas